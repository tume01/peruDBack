# -*- coding: utf-8 -*-
from model_utils.models import TimeStampedModel
from django.conf import settings
from django_mysql.models import Model, JSONField
from django.db import models
from shapely.geometry import Point
from shapely.geometry.polygon import Polygon


class IncidentType(TimeStampedModel):

    INCIDENT = 1
    PRE_INCIDENT = 2
    name = models.CharField(
        max_length=50
    )

    def __str__(self):
        return self.name

    class Meta:
        ordering = ['-created']
        default_permissions = settings.API_PERMISSIONS

class Incident(TimeStampedModel):

    type = models.ForeignKey(
        IncidentType,
        on_delete=models.CASCADE,
        null=True,
    )

    sender_id = models.CharField(
        max_length=5000,
    )

    latitude = models.DecimalField(
        max_digits=9,
        decimal_places=6,
        blank=True,
        null=True,
    )

    longitude = models.DecimalField(
        max_digits=9,
        decimal_places=6,
        blank=True,
        null=True,
    )

    evidence_media = models.CharField(
        max_length=5000,
        blank=True,
        null=True,
    )

    is_anonymous = models.NullBooleanField()

    started = models.NullBooleanField()

    genre = models.CharField(
        max_length=50,
        null=True,
    )

    civil_state = models.CharField(
        max_length=50,
        null=True,
    )

    profession = models.CharField(
        max_length=50,
        null=True,
    )

    address = models.CharField(
        max_length=50,
        null=True,
    )

    age = models.IntegerField(
        null=True,
    )

    dni = models.CharField(
        max_length=50,
        null=True,
    )

    name = models.CharField(
        max_length=50,
        null=True,
    )

    date = models.DateField(null=True)

    time = models.TimeField(null=True)

    kind = models.CharField(
        max_length=50,
        null=True,
    )

    description = models.CharField(
        max_length=5000,
        null=True,
    )

    have_proof = models.NullBooleanField()

    requested_date = models.NullBooleanField()

    request_kind = models.NullBooleanField()

    proof_requested = models.NullBooleanField()

    evidence_requested = models.NullBooleanField()

    ended = models.NullBooleanField()

    location_requested = models.NullBooleanField()

    indentity_required = models.NullBooleanField()

    status = models.CharField(
        max_length=100,
        null=True,
        blank=True,
    )
    @property
    def district(self):
        point = Point(self.latitude, self.longitude)
        for district in self.get_districts():
            if district['polygon'].contains(point):
                return district['name']
        return 'Miraflores'

    def get_districts(self):
        return [
            {
                'name': 'Miraflores',
                'polygon': self.miraflores_polygon(),
            },
            {
                'name': 'Magdalena',
                'polygon': self.magdalena_polygon(),
            },
            {
                'name': 'San Isidro',
                'polygon': self.san_isidro_polygon(),
            }
        ]

    def san_isidro_polygon(self):
        return Polygon([
            [-12.0908124, -77.0228124],
            [-12.0890605, -77.0098378],
            [-12.0889277, -77.0074003],
            [-12.0891562, -77.0071406],
            [-12.0959785, -77.0110019],
            [-12.0991113, -77.0121132],
            [-12.1066835, -77.0106210],
            [-12.1072792, -77.0104414],
            [-12.1080410, -77.0146914],
            [-12.1077812, -77.0149804],
            [-12.1055683, -77.0165527],
            [-12.1043476, -77.0164707],
            [-12.1041425, -77.0164179],
            [-12.1035624, -77.0161191],
            [-12.1034277, -77.0163261],
            [-12.1033242, -77.0164335],
            [-12.1032226, -77.0164863],
            [-12.1030644, -77.0165136],
            [-12.1022968, -77.0164121],
            [-12.1019218, -77.0187656],
            [-12.1028789, -77.0273789],
            [-12.1035507, -77.0314882],
            [-12.1100253, -77.0366113],
            [-12.1100664, -77.0371562],
            [-12.1089746, -77.0382499],
            [-12.1097519, -77.0390410],
            [-12.1083457, -77.0404628],
            [-12.1108457, -77.0431132],
            [-12.1106542, -77.0435234],
            [-12.1104765, -77.0441503],
            [-12.1104492, -77.0449980],
            [-12.1104628, -77.0461855],
            [-12.1109414, -77.0466914],
            [-12.1083691, -77.0492695],
            [-12.1103515, -77.0514003],
            [-12.1084062, -77.0531621],
            [-12.1089648, -77.0532675],
            [-12.1094277, -77.0537480],
            [-12.1095390, -77.0540488],
            [-12.1098749, -77.0544628],
            [-12.1104394, -77.0549570],
            [-12.1105117, -77.0549804],
            [-12.1105937, -77.0550566],
            [-12.1106757, -77.0551542],
            [-12.1108027, -77.0553535],
            [-12.1108886, -77.0555371],
            [-12.1109414, -77.0556933],
            [-12.1109921, -77.0559492],
            [-12.1109277, -77.0561093],
            [-12.1076542, -77.0607148],
            [-12.1070117, -77.0604687],
            [-12.1051679, -77.0603085],
            [-12.1046523, -77.0603554],
            [-12.1042128, -77.0605117],
            [-12.1037285, -77.0606249],
            [-12.1032597, -77.0606210],
            [-12.1029628, -77.0605429],
            [-12.1025234, -77.0606679],
            [-12.1021328, -77.0607792],
            [-12.1018203, -77.0607460],
            [-12.1014609, -77.0606835],
            [-12.1010703, -77.0605742],
            [-12.1009433, -77.0607949],
            [-12.0998886, -77.0602011],
            [-12.1000214, -77.0599511],
            [-12.0990039, -77.0594843],
            [-12.0986210, -77.0593691],
            [-12.0966699, -77.0583847],
            [-12.0964042, -77.0588847],
            [-12.0925527, -77.0573847],
            [-12.0933867, -77.0557675],
            [-12.0918867, -77.0549843],
            [-12.0930703, -77.0532167],
            [-12.0867031, -77.0499003],
            [-12.0862460, -77.0496230],
            [-12.0855546, -77.0490839],
            [-12.0850410, -77.0485859],
            [-12.0915761, -77.0476171],
            [-12.0914238, -77.0464941],
            [-12.0916718, -77.0464531],
            [-12.0912011, -77.0430624],
            [-12.0904550, -77.0431718],
            [-12.0891699, -77.0337343],
            [-12.0907304, -77.0334589],
            [-12.0911894, -77.0298789],
            [-12.0919101, -77.0301679],
            [-12.0908124, -77.0228124],
        ])

    def magdalena_polygon(self):
        return Polygon([
            [-12.0867050, -77.0633300],
            [-12.0870429, -77.0624160],
            [-12.0918867, -77.0549843],
            [-12.0933867, -77.0557675],
            [-12.0925527, -77.0573847],
            [-12.0964042, -77.0588847],
            [-12.0966699, -77.0583847],
            [-12.0986210, -77.0593691],
            [-12.0990039, -77.0594843],
            [-12.1000214, -77.0599511],
            [-12.0998886, -77.0602011],
            [-12.1009433, -77.0607949],
            [-12.1010703, -77.0605742],
            [-12.1014609, -77.0606835],
            [-12.1018203, -77.0607460],
            [-12.1021328, -77.0607792],
            [-12.1025234, -77.0606679],
            [-12.1029628, -77.0605429],
            [-12.1032597, -77.0606210],
            [-12.1037285, -77.0606249],
            [-12.1042128, -77.0605117],
            [-12.1046523, -77.0603554],
            [-12.1051679, -77.0603085],
            [-12.1070117, -77.0604687],
            [-12.1076542, -77.0607148],
            [-12.1054140, -77.0628437],
            [-12.1031757, -77.0648046],
            [-12.1024921, -77.0656601],
            [-12.1007109, -77.0693613],
            [-12.0999902, -77.0713886],
            [-12.0977597, -77.0737304],
            [-12.0963984, -77.0767812],
            [-12.0957207, -77.0777285],
            [-12.0915351, -77.0761874],
            [-12.0885957, -77.0751152],
            [-12.0889414, -77.0740937],
            [-12.0879609, -77.0737499],
            [-12.0875019, -77.0749140],
            [-12.0856796, -77.0739218],
            [-12.0858144, -77.0735390],
            [-12.0837597, -77.0722851],
            [-12.0837714, -77.0722187],
            [-12.0835839, -77.0721035],
        ])

    def miraflores_polygon(self):
        return Polygon([
            [-12.1093749, -77.0263007],
            [-12.1122949, -77.0259746],
            [-12.1133730, -77.0259082],
            [-12.1166582, -77.0261562],
            [-12.1174628, -77.0261406],
            [-12.1191191, -77.0258515],
            [-12.1191757, -77.0251874],
            [-12.1192695, -77.0249199],
            [-12.1198417, -77.0240957],
            [-12.1194140, -77.0182343],
            [-12.1205624, -77.0182128],
            [-12.1205488, -77.0172792],
            [-12.1194355, -77.0172949],
            [-12.1193789, -77.0138027],
            [-12.1188222, -77.0138027],
            [-12.1187929, -77.0132460],
            [-12.1178671, -77.0132539],
            [-12.1176874, -77.0131953],
            [-12.1175273, -77.0130292],
            [-12.1156914, -77.0101679],
            [-12.1265195, -77.0026718],
            [-12.1283632, -77.0013417],
            [-12.1288613, -77.0016308],
            [-12.1282929, -77.0055917],
            [-12.1276718, -77.0091093],
            [-12.1276249, -77.0095449],
            [-12.1277851, -77.0095683],
            [-12.1280742, -77.0095898],
            [-12.1299101, -77.0094296],
            [-12.1300820, -77.0113085],
            [-12.1300039, -77.0117714],
            [-12.1304941, -77.0118730],
            [-12.1303574, -77.0124589],
            [-12.1308124, -77.0125742],
            [-12.1312617, -77.0129941],
            [-12.1308789, -77.0131816],
            [-12.1302050, -77.0130585],
            [-12.1298437, -77.0130957],
            [-12.1299531, -77.0134843],
            [-12.1294101, -77.0137382],
            [-12.1294824, -77.0139980],
            [-12.1295703, -77.0143671],
            [-12.1295917, -77.0147421],
            [-12.1295761, -77.0151914],
            [-12.1295410, -77.0155820],
            [-12.1299746, -77.0157109],
            [-12.1301992, -77.0158769],
            [-12.1299453, -77.0161601],
            [-12.1305390, -77.0164335],
            [-12.1299374, -77.0171210],
            [-12.1301113, -77.0173164],
            [-12.1304082, -77.0173164],
            [-12.1304218, -77.0180234],
            [-12.1312460, -77.0179999],
            [-12.1312695, -77.0191484],
            [-12.1305273, -77.0195273],
            [-12.1332519, -77.0211562],
            [-12.1334453, -77.0212714],
            [-12.1340703, -77.0216992],
            [-12.1344609, -77.0221035],
            [-12.1347148, -77.0225058],
            [-12.1349335, -77.0231152],
            [-12.1352675, -77.0229960],
            [-12.1358066, -77.0240429],
            [-12.1358789, -77.0242499],
            [-12.1359648, -77.0245683],
            [-12.1359863, -77.0246777],
            [-12.1360195, -77.0248945],
            [-12.1360351, -77.0250058],
            [-12.1360605, -77.0251113],
            [-12.1360937, -77.0252167],
            [-12.1361367, -77.0253183],
            [-12.1361855, -77.0254160],
            [-12.1362402, -77.0255117],
            [-12.1363749, -77.0256835],
            [-12.1365039, -77.0258144],
            [-12.1366503, -77.0259199],
            [-12.1367734, -77.0259843],
            [-12.1377832, -77.0265605],
            [-12.1379648, -77.0266796],
            [-12.1381406, -77.0268105],
            [-12.1384667, -77.0270996],
            [-12.1388066, -77.0274746],
            [-12.1389648, -77.0276249],
            [-12.1391347, -77.0277617],
            [-12.1393164, -77.0278886],
            [-12.1394160, -77.0279394],
            [-12.1395488, -77.0281894],
            [-12.1396269, -77.0283027],
            [-12.1397070, -77.0284531],
            [-12.1401621, -77.0295312],
            [-12.1377148, -77.0294648],
            [-12.1358593, -77.0291621],
            [-12.1339882, -77.0303671],
            [-12.1324765, -77.0320039],
            [-12.1322343, -77.0327070],
            [-12.1308457, -77.0347968],
            [-12.1307519, -77.0353300],
            [-12.1301230, -77.0361464],
            [-12.1277968, -77.0376230],
            [-12.1252773, -77.0398085],
            [-12.1248281, -77.0407285],
            [-12.1248339, -77.0412910],
            [-12.1239023, -77.0424511],
            [-12.1233242, -77.0436191],
            [-12.1214960, -77.0452246],
            [-12.1191210, -77.0462128],
            [-12.1187187, -77.0468359],
            [-12.1182089, -77.0485371],
            [-12.1175351, -77.0493027],
            [-12.1157109, -77.0504003],
            [-12.1109277, -77.0561093],
            [-12.1109921, -77.0559492],
            [-12.1109414, -77.0556933],
            [-12.1108886, -77.0555371],
            [-12.1108027, -77.0553535],
            [-12.1106757, -77.0551542],
            [-12.1105937, -77.0550566],
            [-12.1105117, -77.0549804],
            [-12.1104394, -77.0549570],
            [-12.1098749, -77.0544628],
            [-12.1095390, -77.0540488],
            [-12.1094277, -77.0537480],
            [-12.1089648, -77.0532675],
            [-12.1084062, -77.0531621],
            [-12.1103515, -77.0514003],
            [-12.1083691, -77.0492695],
            [-12.1109414, -77.0466914],
            [-12.1104628, -77.0461855],
            [-12.1104492, -77.0449980],
            [-12.1104765, -77.0441503],
            [-12.1106542, -77.0435234],
            [-12.1108457, -77.0431132],
            [-12.1083457, -77.0404628],
            [-12.1097519, -77.0390410],
            [-12.1089746, -77.0382499],
            [-12.1100664, -77.0371562],
            [-12.1100253, -77.0366113],
            [-12.1035507, -77.0314882],
            [-12.1028789, -77.0273789],
            [-12.1056230, -77.0273847],
            [-12.1061210, -77.0273007],
            [-12.1082617, -77.0264218],
            [-12.1093749, -77.0263007]
        ])

    @property
    def near_police_station(self):
        stations = PoliceStation.objects.all()
        point = Point(self.latitude, self.longitude)
        distance = 100000
        selected_station = None
        for station in stations:
            station_point = Point(station.latitude, station.longitude)
            if point.distance(station_point) < distance:
                selected_station = station
        return selected_station

    class Meta:
        ordering = ['-created']
        default_permissions = settings.API_PERMISSIONS


class PoliceStation(TimeStampedModel):

    address = models.CharField(
        max_length=100,
    )

    latitude = models.DecimalField(
        max_digits=9,
        decimal_places=6,
        blank=True,
        null=True,
    )

    longitude = models.DecimalField(
        max_digits=9,
        decimal_places=6,
        blank=True,
        null=True,
    )

    name = models.CharField(
        max_length=100,
    )

    def __str__(self):
        return self.address

    class Meta:
        ordering = ['-created']
        default_permissions = settings.API_PERMISSIONS

